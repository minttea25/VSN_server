// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTART_VSN_H_
#define FLATBUFFERS_GENERATED_GAMESTART_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Types_generated.h"

namespace VSN {

struct GameStart;
struct GameStartBuilder;

struct GameStart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPAWN_POS = 4
  };
  const VSN::Vector2 *spawn_pos() const {
    return GetStruct<const VSN::Vector2 *>(VT_SPAWN_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<VSN::Vector2>(verifier, VT_SPAWN_POS, 4) &&
           verifier.EndTable();
  }
};

struct GameStartBuilder {
  typedef GameStart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_spawn_pos(const VSN::Vector2 *spawn_pos) {
    fbb_.AddStruct(GameStart::VT_SPAWN_POS, spawn_pos);
  }
  explicit GameStartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameStart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameStart> CreateGameStart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const VSN::Vector2 *spawn_pos = nullptr) {
  GameStartBuilder builder_(_fbb);
  builder_.add_spawn_pos(spawn_pos);
  return builder_.Finish();
}

inline const VSN::GameStart *GetGameStart(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::GameStart>(buf);
}

inline const VSN::GameStart *GetSizePrefixedGameStart(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::GameStart>(buf);
}

inline bool VerifyGameStartBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::GameStart>(nullptr);
}

inline bool VerifySizePrefixedGameStartBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::GameStart>(nullptr);
}

inline void FinishGameStartBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::GameStart> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameStartBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::GameStart> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_GAMESTART_VSN_H_
