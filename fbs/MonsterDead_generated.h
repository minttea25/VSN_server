// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERDEAD_VSN_H_
#define FLATBUFFERS_GENERATED_MONSTERDEAD_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Types_generated.h"

namespace VSN {

struct MonsterDeadInfo;

struct MonsterDead;
struct MonsterDeadBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) MonsterDeadInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t nid_;

 public:
  MonsterDeadInfo()
      : nid_(0) {
  }
  MonsterDeadInfo(uint32_t _nid)
      : nid_(::flatbuffers::EndianScalar(_nid)) {
  }
  uint32_t nid() const {
    return ::flatbuffers::EndianScalar(nid_);
  }
};
FLATBUFFERS_STRUCT_END(MonsterDeadInfo, 4);

struct MonsterDead FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterDeadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFOS = 4
  };
  const ::flatbuffers::Vector<const VSN::MonsterDeadInfo *> *infos() const {
    return GetPointer<const ::flatbuffers::Vector<const VSN::MonsterDeadInfo *> *>(VT_INFOS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyVector(infos()) &&
           verifier.EndTable();
  }
};

struct MonsterDeadBuilder {
  typedef MonsterDead Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_infos(::flatbuffers::Offset<::flatbuffers::Vector<const VSN::MonsterDeadInfo *>> infos) {
    fbb_.AddOffset(MonsterDead::VT_INFOS, infos);
  }
  explicit MonsterDeadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterDead> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterDead>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterDead> CreateMonsterDead(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const VSN::MonsterDeadInfo *>> infos = 0) {
  MonsterDeadBuilder builder_(_fbb);
  builder_.add_infos(infos);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MonsterDead> CreateMonsterDeadDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<VSN::MonsterDeadInfo> *infos = nullptr) {
  auto infos__ = infos ? _fbb.CreateVectorOfStructs<VSN::MonsterDeadInfo>(*infos) : 0;
  return VSN::CreateMonsterDead(
      _fbb,
      infos__);
}

inline const VSN::MonsterDead *GetMonsterDead(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::MonsterDead>(buf);
}

inline const VSN::MonsterDead *GetSizePrefixedMonsterDead(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::MonsterDead>(buf);
}

inline bool VerifyMonsterDeadBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::MonsterDead>(nullptr);
}

inline bool VerifySizePrefixedMonsterDeadBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::MonsterDead>(nullptr);
}

inline void FinishMonsterDeadBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::MonsterDead> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMonsterDeadBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::MonsterDead> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_MONSTERDEAD_VSN_H_
