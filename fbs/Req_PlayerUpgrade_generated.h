// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQPLAYERUPGRADE_VSN_H_
#define FLATBUFFERS_GENERATED_REQPLAYERUPGRADE_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "PlayerUpgrade_generated.h"

namespace VSN {

struct Req_PlayerUpgrade;
struct Req_PlayerUpgradeBuilder;

struct Req_PlayerUpgrade FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Req_PlayerUpgradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQ_ID = 4,
    VT_INFO_TYPE = 6,
    VT_INFO = 8
  };
  uint32_t req_id() const {
    return GetField<uint32_t>(VT_REQ_ID, 0);
  }
  VSN::UpgradeInfo info_type() const {
    return static_cast<VSN::UpgradeInfo>(GetField<uint8_t>(VT_INFO_TYPE, 0));
  }
  const void *info() const {
    return GetPointer<const void *>(VT_INFO);
  }
  template<typename T> const T *info_as() const;
  const VSN::StatUpgrade *info_as_StatUpgrade() const {
    return info_type() == VSN::UpgradeInfo_StatUpgrade ? static_cast<const VSN::StatUpgrade *>(info()) : nullptr;
  }
  const VSN::SkillUpgrade *info_as_SkillUpgrade() const {
    return info_type() == VSN::UpgradeInfo_SkillUpgrade ? static_cast<const VSN::SkillUpgrade *>(info()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQ_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_INFO_TYPE, 1) &&
           VerifyOffset(verifier, VT_INFO) &&
           VerifyUpgradeInfo(verifier, info(), info_type()) &&
           verifier.EndTable();
  }
};

template<> inline const VSN::StatUpgrade *Req_PlayerUpgrade::info_as<VSN::StatUpgrade>() const {
  return info_as_StatUpgrade();
}

template<> inline const VSN::SkillUpgrade *Req_PlayerUpgrade::info_as<VSN::SkillUpgrade>() const {
  return info_as_SkillUpgrade();
}

struct Req_PlayerUpgradeBuilder {
  typedef Req_PlayerUpgrade Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_req_id(uint32_t req_id) {
    fbb_.AddElement<uint32_t>(Req_PlayerUpgrade::VT_REQ_ID, req_id, 0);
  }
  void add_info_type(VSN::UpgradeInfo info_type) {
    fbb_.AddElement<uint8_t>(Req_PlayerUpgrade::VT_INFO_TYPE, static_cast<uint8_t>(info_type), 0);
  }
  void add_info(::flatbuffers::Offset<void> info) {
    fbb_.AddOffset(Req_PlayerUpgrade::VT_INFO, info);
  }
  explicit Req_PlayerUpgradeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Req_PlayerUpgrade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Req_PlayerUpgrade>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Req_PlayerUpgrade> CreateReq_PlayerUpgrade(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t req_id = 0,
    VSN::UpgradeInfo info_type = VSN::UpgradeInfo_NONE,
    ::flatbuffers::Offset<void> info = 0) {
  Req_PlayerUpgradeBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_req_id(req_id);
  builder_.add_info_type(info_type);
  return builder_.Finish();
}

inline const VSN::Req_PlayerUpgrade *GetReq_PlayerUpgrade(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::Req_PlayerUpgrade>(buf);
}

inline const VSN::Req_PlayerUpgrade *GetSizePrefixedReq_PlayerUpgrade(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::Req_PlayerUpgrade>(buf);
}

inline bool VerifyReq_PlayerUpgradeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::Req_PlayerUpgrade>(nullptr);
}

inline bool VerifySizePrefixedReq_PlayerUpgradeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::Req_PlayerUpgrade>(nullptr);
}

inline void FinishReq_PlayerUpgradeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_PlayerUpgrade> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReq_PlayerUpgradeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_PlayerUpgrade> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_REQPLAYERUPGRADE_VSN_H_
