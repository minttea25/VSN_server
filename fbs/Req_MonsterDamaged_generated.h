// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQMONSTERDAMAGED_VSN_H_
#define FLATBUFFERS_GENERATED_REQMONSTERDAMAGED_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Types_generated.h"

namespace VSN {

struct DamagedMonsterReqInfo;

struct Req_MonsterDamaged;
struct Req_MonsterDamagedBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) DamagedMonsterReqInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t nid_;
  int16_t damage_;
  int16_t padding0__;

 public:
  DamagedMonsterReqInfo()
      : nid_(0),
        damage_(0),
        padding0__(0) {
    (void)padding0__;
  }
  DamagedMonsterReqInfo(uint32_t _nid, int16_t _damage)
      : nid_(::flatbuffers::EndianScalar(_nid)),
        damage_(::flatbuffers::EndianScalar(_damage)),
        padding0__(0) {
    (void)padding0__;
  }
  uint32_t nid() const {
    return ::flatbuffers::EndianScalar(nid_);
  }
  int16_t damage() const {
    return ::flatbuffers::EndianScalar(damage_);
  }
};
FLATBUFFERS_STRUCT_END(DamagedMonsterReqInfo, 8);

struct Req_MonsterDamaged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Req_MonsterDamagedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQ_ID = 4,
    VT_INFOS = 6
  };
  uint32_t req_id() const {
    return GetField<uint32_t>(VT_REQ_ID, 0);
  }
  const ::flatbuffers::Vector<const VSN::DamagedMonsterReqInfo *> *infos() const {
    return GetPointer<const ::flatbuffers::Vector<const VSN::DamagedMonsterReqInfo *> *>(VT_INFOS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQ_ID, 4) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyVector(infos()) &&
           verifier.EndTable();
  }
};

struct Req_MonsterDamagedBuilder {
  typedef Req_MonsterDamaged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_req_id(uint32_t req_id) {
    fbb_.AddElement<uint32_t>(Req_MonsterDamaged::VT_REQ_ID, req_id, 0);
  }
  void add_infos(::flatbuffers::Offset<::flatbuffers::Vector<const VSN::DamagedMonsterReqInfo *>> infos) {
    fbb_.AddOffset(Req_MonsterDamaged::VT_INFOS, infos);
  }
  explicit Req_MonsterDamagedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Req_MonsterDamaged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Req_MonsterDamaged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Req_MonsterDamaged> CreateReq_MonsterDamaged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t req_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const VSN::DamagedMonsterReqInfo *>> infos = 0) {
  Req_MonsterDamagedBuilder builder_(_fbb);
  builder_.add_infos(infos);
  builder_.add_req_id(req_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Req_MonsterDamaged> CreateReq_MonsterDamagedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t req_id = 0,
    const std::vector<VSN::DamagedMonsterReqInfo> *infos = nullptr) {
  auto infos__ = infos ? _fbb.CreateVectorOfStructs<VSN::DamagedMonsterReqInfo>(*infos) : 0;
  return VSN::CreateReq_MonsterDamaged(
      _fbb,
      req_id,
      infos__);
}

inline const VSN::Req_MonsterDamaged *GetReq_MonsterDamaged(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::Req_MonsterDamaged>(buf);
}

inline const VSN::Req_MonsterDamaged *GetSizePrefixedReq_MonsterDamaged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::Req_MonsterDamaged>(buf);
}

inline bool VerifyReq_MonsterDamagedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::Req_MonsterDamaged>(nullptr);
}

inline bool VerifySizePrefixedReq_MonsterDamagedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::Req_MonsterDamaged>(nullptr);
}

inline void FinishReq_MonsterDamagedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_MonsterDamaged> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReq_MonsterDamagedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_MonsterDamaged> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_REQMONSTERDAMAGED_VSN_H_
