// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERUPGRADE_VSN_H_
#define FLATBUFFERS_GENERATED_PLAYERUPGRADE_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace VSN {

struct StatUpgrade;
struct StatUpgradeBuilder;

struct SkillUpgrade;
struct SkillUpgradeBuilder;

struct PlayerUpgrade;
struct PlayerUpgradeBuilder;

enum UpgradeInfo : uint8_t {
  UpgradeInfo_NONE = 0,
  UpgradeInfo_StatUpgrade = 1,
  UpgradeInfo_SkillUpgrade = 2,
  UpgradeInfo_MIN = UpgradeInfo_NONE,
  UpgradeInfo_MAX = UpgradeInfo_SkillUpgrade
};

inline const UpgradeInfo (&EnumValuesUpgradeInfo())[3] {
  static const UpgradeInfo values[] = {
    UpgradeInfo_NONE,
    UpgradeInfo_StatUpgrade,
    UpgradeInfo_SkillUpgrade
  };
  return values;
}

inline const char * const *EnumNamesUpgradeInfo() {
  static const char * const names[4] = {
    "NONE",
    "StatUpgrade",
    "SkillUpgrade",
    nullptr
  };
  return names;
}

inline const char *EnumNameUpgradeInfo(UpgradeInfo e) {
  if (::flatbuffers::IsOutRange(e, UpgradeInfo_NONE, UpgradeInfo_SkillUpgrade)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUpgradeInfo()[index];
}

template<typename T> struct UpgradeInfoTraits {
  static const UpgradeInfo enum_value = UpgradeInfo_NONE;
};

template<> struct UpgradeInfoTraits<VSN::StatUpgrade> {
  static const UpgradeInfo enum_value = UpgradeInfo_StatUpgrade;
};

template<> struct UpgradeInfoTraits<VSN::SkillUpgrade> {
  static const UpgradeInfo enum_value = UpgradeInfo_SkillUpgrade;
};

bool VerifyUpgradeInfo(::flatbuffers::Verifier &verifier, const void *obj, UpgradeInfo type);
bool VerifyUpgradeInfoVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct StatUpgrade FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StatUpgradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STAT_TYPE = 4,
    VT_VALUE = 6
  };
  uint8_t stat_type() const {
    return GetField<uint8_t>(VT_STAT_TYPE, 0);
  }
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STAT_TYPE, 1) &&
           VerifyField<uint16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct StatUpgradeBuilder {
  typedef StatUpgrade Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_stat_type(uint8_t stat_type) {
    fbb_.AddElement<uint8_t>(StatUpgrade::VT_STAT_TYPE, stat_type, 0);
  }
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(StatUpgrade::VT_VALUE, value, 0);
  }
  explicit StatUpgradeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StatUpgrade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StatUpgrade>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StatUpgrade> CreateStatUpgrade(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t stat_type = 0,
    uint16_t value = 0) {
  StatUpgradeBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_stat_type(stat_type);
  return builder_.Finish();
}

struct SkillUpgrade FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SkillUpgradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SKILL_TYPE = 4,
    VT_VALUE = 6
  };
  uint8_t skill_type() const {
    return GetField<uint8_t>(VT_SKILL_TYPE, 0);
  }
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SKILL_TYPE, 1) &&
           VerifyField<uint16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct SkillUpgradeBuilder {
  typedef SkillUpgrade Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_skill_type(uint8_t skill_type) {
    fbb_.AddElement<uint8_t>(SkillUpgrade::VT_SKILL_TYPE, skill_type, 0);
  }
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(SkillUpgrade::VT_VALUE, value, 1);
  }
  explicit SkillUpgradeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SkillUpgrade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SkillUpgrade>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SkillUpgrade> CreateSkillUpgrade(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t skill_type = 0,
    uint16_t value = 1) {
  SkillUpgradeBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_skill_type(skill_type);
  return builder_.Finish();
}

struct PlayerUpgrade FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerUpgradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_INFO_TYPE = 6,
    VT_INFO = 8
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  VSN::UpgradeInfo info_type() const {
    return static_cast<VSN::UpgradeInfo>(GetField<uint8_t>(VT_INFO_TYPE, 0));
  }
  const void *info() const {
    return GetPointer<const void *>(VT_INFO);
  }
  template<typename T> const T *info_as() const;
  const VSN::StatUpgrade *info_as_StatUpgrade() const {
    return info_type() == VSN::UpgradeInfo_StatUpgrade ? static_cast<const VSN::StatUpgrade *>(info()) : nullptr;
  }
  const VSN::SkillUpgrade *info_as_SkillUpgrade() const {
    return info_type() == VSN::UpgradeInfo_SkillUpgrade ? static_cast<const VSN::SkillUpgrade *>(info()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_INFO_TYPE, 1) &&
           VerifyOffset(verifier, VT_INFO) &&
           VerifyUpgradeInfo(verifier, info(), info_type()) &&
           verifier.EndTable();
  }
};

template<> inline const VSN::StatUpgrade *PlayerUpgrade::info_as<VSN::StatUpgrade>() const {
  return info_as_StatUpgrade();
}

template<> inline const VSN::SkillUpgrade *PlayerUpgrade::info_as<VSN::SkillUpgrade>() const {
  return info_as_SkillUpgrade();
}

struct PlayerUpgradeBuilder {
  typedef PlayerUpgrade Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(PlayerUpgrade::VT_PLAYER_ID, player_id, 0);
  }
  void add_info_type(VSN::UpgradeInfo info_type) {
    fbb_.AddElement<uint8_t>(PlayerUpgrade::VT_INFO_TYPE, static_cast<uint8_t>(info_type), 0);
  }
  void add_info(::flatbuffers::Offset<void> info) {
    fbb_.AddOffset(PlayerUpgrade::VT_INFO, info);
  }
  explicit PlayerUpgradeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerUpgrade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerUpgrade>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerUpgrade> CreatePlayerUpgrade(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    VSN::UpgradeInfo info_type = VSN::UpgradeInfo_NONE,
    ::flatbuffers::Offset<void> info = 0) {
  PlayerUpgradeBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_player_id(player_id);
  builder_.add_info_type(info_type);
  return builder_.Finish();
}

inline bool VerifyUpgradeInfo(::flatbuffers::Verifier &verifier, const void *obj, UpgradeInfo type) {
  switch (type) {
    case UpgradeInfo_NONE: {
      return true;
    }
    case UpgradeInfo_StatUpgrade: {
      auto ptr = reinterpret_cast<const VSN::StatUpgrade *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UpgradeInfo_SkillUpgrade: {
      auto ptr = reinterpret_cast<const VSN::SkillUpgrade *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyUpgradeInfoVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyUpgradeInfo(
        verifier,  values->Get(i), types->GetEnum<UpgradeInfo>(i))) {
      return false;
    }
  }
  return true;
}

inline const VSN::PlayerUpgrade *GetPlayerUpgrade(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::PlayerUpgrade>(buf);
}

inline const VSN::PlayerUpgrade *GetSizePrefixedPlayerUpgrade(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::PlayerUpgrade>(buf);
}

inline bool VerifyPlayerUpgradeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::PlayerUpgrade>(nullptr);
}

inline bool VerifySizePrefixedPlayerUpgradeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::PlayerUpgrade>(nullptr);
}

inline void FinishPlayerUpgradeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerUpgrade> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerUpgradeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerUpgrade> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_PLAYERUPGRADE_VSN_H_
