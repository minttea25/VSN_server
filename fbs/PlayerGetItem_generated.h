// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERGETITEM_VSN_H_
#define FLATBUFFERS_GENERATED_PLAYERGETITEM_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace VSN {

struct PlayerGetItem;
struct PlayerGetItemBuilder;

struct PlayerGetItem FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGetItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_ITEM_NID = 6,
    VT_ITEM_TYPE = 8
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  uint32_t item_nid() const {
    return GetField<uint32_t>(VT_ITEM_NID, 0);
  }
  uint8_t item_type() const {
    return GetField<uint8_t>(VT_ITEM_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_NID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ITEM_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct PlayerGetItemBuilder {
  typedef PlayerGetItem Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(PlayerGetItem::VT_PLAYER_ID, player_id, 0);
  }
  void add_item_nid(uint32_t item_nid) {
    fbb_.AddElement<uint32_t>(PlayerGetItem::VT_ITEM_NID, item_nid, 0);
  }
  void add_item_type(uint8_t item_type) {
    fbb_.AddElement<uint8_t>(PlayerGetItem::VT_ITEM_TYPE, item_type, 0);
  }
  explicit PlayerGetItemBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGetItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGetItem>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGetItem> CreatePlayerGetItem(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    uint32_t item_nid = 0,
    uint8_t item_type = 0) {
  PlayerGetItemBuilder builder_(_fbb);
  builder_.add_item_nid(item_nid);
  builder_.add_player_id(player_id);
  builder_.add_item_type(item_type);
  return builder_.Finish();
}

inline const VSN::PlayerGetItem *GetPlayerGetItem(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::PlayerGetItem>(buf);
}

inline const VSN::PlayerGetItem *GetSizePrefixedPlayerGetItem(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::PlayerGetItem>(buf);
}

inline bool VerifyPlayerGetItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::PlayerGetItem>(nullptr);
}

inline bool VerifySizePrefixedPlayerGetItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::PlayerGetItem>(nullptr);
}

inline void FinishPlayerGetItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerGetItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerGetItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerGetItem> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_PLAYERGETITEM_VSN_H_
