// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQGETITEM_VSN_H_
#define FLATBUFFERS_GENERATED_REQGETITEM_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace VSN {

struct Req_GetItem;
struct Req_GetItemBuilder;

struct Req_GetItem FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Req_GetItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQ_ID = 4,
    VT_ITEM_NID = 6
  };
  uint32_t req_id() const {
    return GetField<uint32_t>(VT_REQ_ID, 0);
  }
  uint32_t item_nid() const {
    return GetField<uint32_t>(VT_ITEM_NID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQ_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_NID, 4) &&
           verifier.EndTable();
  }
};

struct Req_GetItemBuilder {
  typedef Req_GetItem Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_req_id(uint32_t req_id) {
    fbb_.AddElement<uint32_t>(Req_GetItem::VT_REQ_ID, req_id, 0);
  }
  void add_item_nid(uint32_t item_nid) {
    fbb_.AddElement<uint32_t>(Req_GetItem::VT_ITEM_NID, item_nid, 0);
  }
  explicit Req_GetItemBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Req_GetItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Req_GetItem>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Req_GetItem> CreateReq_GetItem(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t req_id = 0,
    uint32_t item_nid = 0) {
  Req_GetItemBuilder builder_(_fbb);
  builder_.add_item_nid(item_nid);
  builder_.add_req_id(req_id);
  return builder_.Finish();
}

inline const VSN::Req_GetItem *GetReq_GetItem(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::Req_GetItem>(buf);
}

inline const VSN::Req_GetItem *GetSizePrefixedReq_GetItem(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::Req_GetItem>(buf);
}

inline bool VerifyReq_GetItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::Req_GetItem>(nullptr);
}

inline bool VerifySizePrefixedReq_GetItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::Req_GetItem>(nullptr);
}

inline void FinishReq_GetItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_GetItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReq_GetItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Req_GetItem> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_REQGETITEM_VSN_H_
