// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESGETEXP_VSN_H_
#define FLATBUFFERS_GENERATED_RESGETEXP_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace VSN {

struct Res_GetExp;
struct Res_GetExpBuilder;

struct Res_GetExp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Res_GetExpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQ_ID = 4,
    VT_RES = 6,
    VT_LEVEL_UP = 8,
    VT_NOW_LEVEL = 10
  };
  uint32_t req_id() const {
    return GetField<uint32_t>(VT_REQ_ID, 0);
  }
  bool res() const {
    return GetField<uint8_t>(VT_RES, 0) != 0;
  }
  bool level_up() const {
    return GetField<uint8_t>(VT_LEVEL_UP, 0) != 0;
  }
  uint16_t now_level() const {
    return GetField<uint16_t>(VT_NOW_LEVEL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQ_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_RES, 1) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL_UP, 1) &&
           VerifyField<uint16_t>(verifier, VT_NOW_LEVEL, 2) &&
           verifier.EndTable();
  }
};

struct Res_GetExpBuilder {
  typedef Res_GetExp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_req_id(uint32_t req_id) {
    fbb_.AddElement<uint32_t>(Res_GetExp::VT_REQ_ID, req_id, 0);
  }
  void add_res(bool res) {
    fbb_.AddElement<uint8_t>(Res_GetExp::VT_RES, static_cast<uint8_t>(res), 0);
  }
  void add_level_up(bool level_up) {
    fbb_.AddElement<uint8_t>(Res_GetExp::VT_LEVEL_UP, static_cast<uint8_t>(level_up), 0);
  }
  void add_now_level(uint16_t now_level) {
    fbb_.AddElement<uint16_t>(Res_GetExp::VT_NOW_LEVEL, now_level, 0);
  }
  explicit Res_GetExpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Res_GetExp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Res_GetExp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Res_GetExp> CreateRes_GetExp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t req_id = 0,
    bool res = false,
    bool level_up = false,
    uint16_t now_level = 0) {
  Res_GetExpBuilder builder_(_fbb);
  builder_.add_req_id(req_id);
  builder_.add_now_level(now_level);
  builder_.add_level_up(level_up);
  builder_.add_res(res);
  return builder_.Finish();
}

inline const VSN::Res_GetExp *GetRes_GetExp(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::Res_GetExp>(buf);
}

inline const VSN::Res_GetExp *GetSizePrefixedRes_GetExp(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::Res_GetExp>(buf);
}

inline bool VerifyRes_GetExpBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::Res_GetExp>(nullptr);
}

inline bool VerifySizePrefixedRes_GetExpBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::Res_GetExp>(nullptr);
}

inline void FinishRes_GetExpBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Res_GetExp> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRes_GetExpBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::Res_GetExp> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_RESGETEXP_VSN_H_
