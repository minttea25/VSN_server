// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERSTATE_VSN_H_
#define FLATBUFFERS_GENERATED_PLAYERSTATE_VSN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Types_generated.h"

namespace VSN {

struct PlayerState;
struct PlayerStateBuilder;

struct PlayerState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_CHANGE_FLAG = 6,
    VT_TOWARD_LEFT = 8,
    VT_POSITION = 10,
    VT_STATE = 12
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  uint32_t change_flag() const {
    return GetField<uint32_t>(VT_CHANGE_FLAG, 0);
  }
  bool toward_left() const {
    return GetField<uint8_t>(VT_TOWARD_LEFT, 0) != 0;
  }
  const VSN::Vector2 *position() const {
    return GetStruct<const VSN::Vector2 *>(VT_POSITION);
  }
  uint8_t state() const {
    return GetField<uint8_t>(VT_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_CHANGE_FLAG, 4) &&
           VerifyField<uint8_t>(verifier, VT_TOWARD_LEFT, 1) &&
           VerifyField<VSN::Vector2>(verifier, VT_POSITION, 4) &&
           VerifyField<uint8_t>(verifier, VT_STATE, 1) &&
           verifier.EndTable();
  }
};

struct PlayerStateBuilder {
  typedef PlayerState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(PlayerState::VT_PLAYER_ID, player_id, 0);
  }
  void add_change_flag(uint32_t change_flag) {
    fbb_.AddElement<uint32_t>(PlayerState::VT_CHANGE_FLAG, change_flag, 0);
  }
  void add_toward_left(bool toward_left) {
    fbb_.AddElement<uint8_t>(PlayerState::VT_TOWARD_LEFT, static_cast<uint8_t>(toward_left), 0);
  }
  void add_position(const VSN::Vector2 *position) {
    fbb_.AddStruct(PlayerState::VT_POSITION, position);
  }
  void add_state(uint8_t state) {
    fbb_.AddElement<uint8_t>(PlayerState::VT_STATE, state, 0);
  }
  explicit PlayerStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerState> CreatePlayerState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    uint32_t change_flag = 0,
    bool toward_left = false,
    const VSN::Vector2 *position = nullptr,
    uint8_t state = 0) {
  PlayerStateBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_change_flag(change_flag);
  builder_.add_player_id(player_id);
  builder_.add_state(state);
  builder_.add_toward_left(toward_left);
  return builder_.Finish();
}

inline const VSN::PlayerState *GetPlayerState(const void *buf) {
  return ::flatbuffers::GetRoot<VSN::PlayerState>(buf);
}

inline const VSN::PlayerState *GetSizePrefixedPlayerState(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VSN::PlayerState>(buf);
}

inline bool VerifyPlayerStateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VSN::PlayerState>(nullptr);
}

inline bool VerifySizePrefixedPlayerStateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VSN::PlayerState>(nullptr);
}

inline void FinishPlayerStateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerStateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VSN::PlayerState> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace VSN

#endif  // FLATBUFFERS_GENERATED_PLAYERSTATE_VSN_H_
